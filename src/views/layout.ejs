<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="books.css" />
    <link
        href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"
        rel="stylesheet"
        integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ"
        crossorigin="anonymous"
    />
    <script
        src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe"
        crossorigin="anonymous"
    ></script>
    <title>Christians Fellowship Library</title>
</head>
<body>
    <!-- Modal for displaying authors -->
   

    <!-- Modal for sorting books by name -->


    <nav class="navbar navbar-expand-lg bg-body-tertiary bg-dark" data-bs-theme="dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Christians Fellowship Library</a>
            <button
                class="navbar-toggler"
                type="button"
                data-bs-toggle="collapse"
                data-bs-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent"
                aria-expanded="false"
                aria-label="Toggle navigation"
            >
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/">Books</a>
                    </li>
                    <% if(locals.userEmail == "lalhriemsangfaihriemsang@gmail.com") { %>
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/new">Add New Book</a>
                    </li>
                  
                    <% } %>
                    <% if(locals.userEmail) { %>
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/logout">Logout</a>
                    </li>
                    <!-- <li class="filter">
                        <a class="nav-link active" aria-current="page" href="#" id="showAuthors">Filter</a>
                    </li> -->
                    <!-- <li class="nav-item">
                      <a class="nav-link active" aria-current="page" href="#" id="showSortDialog">Sort</a>
                  </li> -->
                    <% } else { %>
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/register">Register</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/login">Login</a>
                    </li>
                    <!-- <li class="filter">
                        <a class="nav-link active" aria-current="page" href="#" id="showAuthors">Filter</a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link active" aria-current="page" href="#" id="showSortDialog">Sort</a>
                  </li> -->
                  
                    <% } %>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container">
        <!-- Place holder for other ejs views -->
        <%- body %>
    </div>

    <script>
document.addEventListener("DOMContentLoaded", function () {
    const showSortDialogButton = document.getElementById("showSortDialog");
    const sortByNameCheckbox = document.getElementById("sortByName");
    const sortByAuthorCheckbox = document.getElementById("sortByAuthor");
    const container = document.querySelector(".container-fluid.d-flex.flex-wrap.justify-content-evenly");

    function updateBookVisibility() {
        if (!container) {
            console.error("Container not found.");
            return;
        }

        let booksArray = Array.from(container.children);

        if (sortByNameCheckbox.checked) {
            booksArray.sort((a, b) => {
                const titleA = a.querySelector(".card-title")?.innerText.toLowerCase().trim() || '';
                const titleB = b.querySelector(".card-title")?.innerText.toLowerCase().trim() || '';
                return titleA.localeCompare(titleB);
            });
        } else if (sortByAuthorCheckbox.checked) {
            booksArray.sort((a, b) => {
                const authorA = a.querySelector(".card-title")?.innerText.split("by")[1]?.toLowerCase().trim() || '';
                const authorB = b.querySelector(".card-title")?.innerText.split("by")[1]?.toLowerCase().trim() || '';
                return authorA.localeCompare(authorB);
            });
        }

        container.innerHTML = "";

        booksArray.forEach((col) => {
            container.appendChild(col);
        });
    }

    showSortDialogButton.addEventListener("click", function (event) {
        event.preventDefault();
        const sortModal = new bootstrap.Modal(document.getElementById("sortModal"));
        sortModal.show();
    });

    sortByNameCheckbox.addEventListener("change", function () {
        if (sortByNameCheckbox.checked) {
            sortByAuthorCheckbox.checked = false; // Uncheck the author sort if name sort is selected
        }
        updateBookVisibility();
    });

    sortByAuthorCheckbox.addEventListener("change", function () {
        if (sortByAuthorCheckbox.checked) {
            sortByNameCheckbox.checked = false; // Uncheck the name sort if author sort is selected
        }
        updateBookVisibility();
    });
});

    </script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.getElementById("searchInput");
        const showAuthorsButton = document.getElementById("showAuthors");
        const authorsList = document.getElementById("authorsList");
    
        // Fetch and display authors when the "Filter" button is clicked
        showAuthorsButton.addEventListener("click", function (event) {
            event.preventDefault();
    
            fetch("/get-all-authors")
                .then((response) => {
                    if (!response.ok) {
                        throw new Error("Network response was not ok");
                    }
                    return response.json().catch(() => {
                        throw new Error("Error parsing JSON response");
                    });
                })
                .then((data) => {
                    authorsList.innerHTML = ""; // Clear previous authors
    
                    if (Array.isArray(data) && data.length > 0) {
                        data.forEach((author) => {
                            const listItem = document.createElement("div");
                            listItem.className = "col";
    
                            const checkboxWrapper = document.createElement("div");
                            checkboxWrapper.className = "form-check";
    
                            const checkbox = document.createElement("input");
                            checkbox.className = "form-check-input";
                            checkbox.type = "checkbox";
                            checkbox.value = author;
                            checkbox.id = `author-${author}`;
    
                            const label = document.createElement("label");
                            label.className = "form-check-label";
                            label.setAttribute("for", `author-${author}`);
                            label.textContent = author;
    
                            checkboxWrapper.appendChild(checkbox);
                            checkboxWrapper.appendChild(label);
                            listItem.appendChild(checkboxWrapper);
                            authorsList.appendChild(listItem);
    
                            // Add event listener to transfer author name to search bar when clicked
                            checkbox.addEventListener("change", function () {
                                if (this.checked) {
                                    searchInput.value = author;
                                    updateBookVisibility(); // Trigger search immediately
    
                                    // Uncheck all other checkboxes
                                    const allCheckboxes = document.querySelectorAll(".form-check-input");
                                    allCheckboxes.forEach((cb) => {
                                        if (cb !== this) {
                                            cb.checked = false;
                                        }
                                    });
                                }else{
                                  searchInput.value =""
                                  updateBookVisibility(); // Trigger search immediately

                                }
                            });
                        });
                    } else {
                        authorsList.innerHTML = '<div class="col">No authors found</div>';
                    }
    
                    // Show the modal
                    const authorsModal = new bootstrap.Modal(document.getElementById("authorsModal"));
                    authorsModal.show();
                })
                .catch((error) => {
                    console.error("Error fetching authors:", error);
                    authorsList.innerHTML = '<div class="col">Error fetching authors</div>';
                    const authorsModal = new bootstrap.Modal(document.getElementById("authorsModal"));
                    authorsModal.show();
                });
        });
    
        // Function to update book visibility based on the search input
        const bookCards = document.querySelectorAll(".card-body");
        function updateBookVisibility() {
            const query = searchInput.value.toLowerCase();
            let visibleCount = 0;
    
            bookCards.forEach((card) => {
                const title = card.querySelector(".card-title").innerText.toLowerCase();
                const description = card.querySelector(".card-text").innerText.toLowerCase();
    
                if (title.includes(query) || description.includes(query)) {
                    card.parentElement.style.display = ""; // Show the card
                    visibleCount++;
                } else {
                    card.parentElement.style.display = "none"; // Hide the card
                }
            });
    
            // Display a message if no books are found
            const noBooksMessage = document.getElementById("noBooksMessage");
            if (visibleCount === 0) {
                noBooksMessage.style.display = "block";
            } else {
                noBooksMessage.style.display = "none";
            }
        }
    
        searchInput.addEventListener("input", updateBookVisibility);
    
        // Initialize the visibility on page load
        updateBookVisibility();
    });
</script>
<style>
  .container-fluid {
    padding: 1rem; /* Optional: Adjust padding as needed */
  }

  .card-body {
    width: 18rem; /* Fixed width for the card */
    height: auto; /* Height will adjust based on content */
    display: flex;
    flex-direction: column;
    justify-content: center; /* Center vertically */
    align-items: center; /* Center horizontally */
    border: 1px solid #ddd;
    border-radius: 0.5rem;
    overflow: hidden;
    margin-bottom: 1rem; /* Spacing between cards */
    background: #8c878723; /* Optional: Background color for better visibility */
  }

  .card-img {
    width: 100%;
    height: 15rem; /* Fixed height for the image */
    object-fit: cover; /* Ensures the image covers the area without distortion */
  }

  .card-title {
    font-size: 1.1rem;
    font-weight: bold;
    margin: 0.5rem 0;
    text-align: center; /* Center text horizontally */
  }

  .card-text {
    font-size: 0.9rem;
    color: #333;
    text-align: center; /* Center text horizontally */
  }

  .card-quantity {
    font-size: 0.85rem;
    color: #666;
  }

  .card-desc {
    font-size: 0.85rem;
    color: #444;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2; /* Number of lines to display */
    -webkit-box-orient: vertical;
  }

 .default-image {
    width: 100%;
    height: 15rem; /* Match the height of the image */
    background-color: #f0f0f0; /* Light grey or any other color */
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    line-height: 15rem; /* Same as the height for vertical centering */
    color: #999; /* Light color for any placeholder text */
  }
</style>


</body>
</html>
