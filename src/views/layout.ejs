<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="google-site-verification" content="5vcUHBi8_HMPQoDMeobavlZ8TVecgGuffE3TTPEMwG0" />
    <link rel="stylesheet" href="books.css" />
    <link
        href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"
        rel="stylesheet"
        integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ"
        crossorigin="anonymous"
    />
    <script
        src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe"
        crossorigin="anonymous"
    ></script>
    <title>Christian Fellowship Library</title>
    <style>
        /* Page heading style */
        h1 {
            font-size: 2.5rem;
            color: #2c3e50;
            text-align: center;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg bg-body-tertiary bg-dark" data-bs-theme="dark" style="padding-bottom: 0;">
        <div class="container-fluid" style="margin-bottom: 0;">
            <a class="navbar-brand" href="/" style="margin-bottom: 0;">    <h4  style="margin-bottom: 0;padding-bottom: 0;"><strong>Christian Fellowship Library</strong></h4>
                </a>
            <button
                class="navbar-toggler"
                type="button"
                data-bs-toggle="collapse"
                data-bs-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent"
                aria-expanded="false"
                aria-label="Toggle navigation"
            >
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent"  >
                <ul class="navbar-nav mb-2 mb-lg-0">

                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/books">Books</a>
                    </li>
                    <% if(locals.userEmail == "lalhriemsangfaihriemsang@gmail.com"||
                    locals.userEmail=="gvp1992@gmail.com") { %>
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/new">Add New Book</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/books-with-unaccepted-requests">Notifications</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/books-requests">Issued</a>
                    </li>
                    <% } %>
                    <% if(locals.userEmail) { %>
                        <li class="nav-item">
                            <a class="nav-link active" aria-current="page" href="/aboutUs">About</a>
                        </li>
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/logout">Logout</a>
                    </li>
    
                    <% } else { %>
                        <li class="nav-item">
                            <a class="nav-link active" aria-current="page" href="/aboutUs">About </a>
                        </li>
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/register">Register</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/login">Login</a>
                    </li>
              
                    <% } %>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container">
        <%- body %>
    </div>
<script>


    document.addEventListener("DOMContentLoaded", function () {
  

    const showSortDialogButton = document.getElementById("showSortDialog");
    const sortByNameCheckbox = document.getElementById("sortByName");
    const sortByAuthorCheckbox = document.getElementById("sortByAuthor");
    const sortByPagesCheckbox = document.getElementById("sortByPages");
    const sortOrderSelect = document.getElementById("sortOrder");
    const container = document.querySelector(".container-fluid.d-flex.flex-wrap.justify-content-evenly");
console.log("here :", sortByPagesCheckbox)
    function updateBookVisibility() {
        if (!container) {
            console.error("Container not found.");
            return;
        }

        let booksArray = Array.from(container.children);

        if (sortByNameCheckbox.checked) {
            booksArray.sort((a, b) => {
                const titleA = a.querySelector(".card-title")?.innerText.toLowerCase().trim() || '';
                const titleB = b.querySelector(".card-title")?.innerText.toLowerCase().trim() || '';
                if (sortOrderSelect.value === "ascending") {
                    return titleA.localeCompare(titleB);                } else {
                        return titleB.localeCompare(titleA);                }                
            });
        } else if (sortByAuthorCheckbox.checked) {
            booksArray.sort((a, b) => {
                const authorA = a.querySelector(".card-title")?.innerText.split("by")[1]?.toLowerCase().trim() || '';
                const authorB = b.querySelector(".card-title")?.innerText.split("by")[1]?.toLowerCase().trim() || '';
                if (sortOrderSelect.value === "ascending") {
                    return authorA.localeCompare(authorB);                } else {
                        return authorB.localeCompare(authorA);                }     
            });
        } else if (sortByPagesCheckbox.checked) {
            booksArray.sort((a, b) => {
                const pagesA = parseInt(a.querySelector(".card-pages")?.innerText.trim() || '0', 10);
                const pagesB = parseInt(b.querySelector(".card-pages")?.innerText.trim() || '0', 10);
                console.log(pagesA, pagesB)
                if (sortOrderSelect.value === "ascending") {
                    return pagesA - pagesB;
                } else {
                    return pagesB - pagesA;
                }
            });
        }

        container.innerHTML = "";

        booksArray.forEach((col) => {
            container.appendChild(col);
        });
    }

    showSortDialogButton.addEventListener("click", function (event) {
        event.preventDefault();
        const sortModal = new bootstrap.Modal(document.getElementById("sortModal"));
        sortModal.show();
    });

    sortByNameCheckbox.addEventListener("change", function () {
        if (sortByNameCheckbox.checked) {
            sortByAuthorCheckbox.checked = false;
            sortByPagesCheckbox.checked = false;
        }
        updateBookVisibility();
    });

    sortByAuthorCheckbox.addEventListener("change", function () {
        if (sortByAuthorCheckbox.checked) {
            sortByNameCheckbox.checked = false;
            sortByPagesCheckbox.checked = false;
        }
        updateBookVisibility();
    });

    sortByPagesCheckbox.addEventListener("change", function () {
        console.log("checked unchecked")
        if (sortByPagesCheckbox.checked) {
            sortByNameCheckbox.checked = false;
            sortByAuthorCheckbox.checked = false;
        }
        updateBookVisibility();
    });

    sortOrderSelect.addEventListener("change", updateBookVisibility);
   
});

</script>
    <script>
    document.addEventListener("DOMContentLoaded", function () {

                // Function to get URL parameter by name
        function getQueryParam(param) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(param);
        }

        // Extract the search query from URL
        const searchQuery = getQueryParam('search');
    const typeQuery=getQueryParam('type');


        const searchInput = document.getElementById("searchInput");
    
        const showAuthorsButton = document.getElementById("showAuthors");
        const authorsList = document.getElementById("authorsList");
        const filterEbookCheckbox = document.getElementById("filterEbook");
        const filterHardcopyCheckbox = document.getElementById("filterHardcopy");
        const applyCategoryFilterButton = document.getElementById("applyCategoryFilter");
        const applyClearCategoryFilterButton = document.getElementById("applyClearCategoryFilter");

        // Fetch and display authors when the "Filter" button is clicked
        showAuthorsButton.addEventListener("click", function (event) {
            event.preventDefault();

            fetch("/get-all-authors")
                .then((response) => {
                    if (!response.ok) {
                        throw new Error("Network response was not ok");
                    }
                    return response.json().catch(() => {
                        throw new Error("Error parsing JSON response");
                    });
                })
                .then((data) => {
                    authorsList.innerHTML = ""; // Clear previous authors

                    if (Array.isArray(data) && data.length > 0) {
                        data.forEach((author) => {
                            const listItem = document.createElement("div");
                            listItem.className = "col";

                            const checkboxWrapper = document.createElement("div");
                            checkboxWrapper.className = "form-check";

                            const checkbox = document.createElement("input");
                            checkbox.className = "form-check-input";
                            checkbox.type = "checkbox";
                            checkbox.value = author;
                            checkbox.id = `author-${author}`;

                            const label = document.createElement("label");
                            label.className = "form-check-label";
                            label.setAttribute("for", `author-${author}`);
                            label.textContent = author;

                            checkboxWrapper.appendChild(checkbox);
                            checkboxWrapper.appendChild(label);
                            listItem.appendChild(checkboxWrapper);
                            authorsList.appendChild(listItem);

                            // Add event listener to transfer author name to search bar when clicked
                            checkbox.addEventListener("change", function () {
                                if (this.checked) {
                                    searchInput.value = author;
                                    updateBookVisibility(); // Trigger search immediately

                                    // Uncheck all other checkboxes
                                    const allCheckboxes = document.querySelectorAll(".form-check-input");
                                    allCheckboxes.forEach((cb) => {
                                        if (cb !== this) {
                                            cb.checked = false;
                                        }
                                    });
                                } else {
                                    searchInput.value = "";
                                    updateBookVisibility(); // Trigger search immediately
                                }
                            });
                        });
                    } else {
                        authorsList.innerHTML = '<div class="col">No authors found</div>';
                    }

                    // Show the modal
                    const authorsModal = new bootstrap.Modal(document.getElementById("authorsModal"));
                    authorsModal.show();
                })
                .catch((error) => {
                    console.error("Error fetching authors:", error);
                    authorsList.innerHTML = '<div class="col">Error fetching authors</div>';
                    const authorsModal = new bootstrap.Modal(document.getElementById("authorsModal"));
                    authorsModal.show();
                });
        });
        function handleTypeSelection(event) {
            const clickedCheckbox = event.target;

            if (clickedCheckbox.id === "filterEbook" && clickedCheckbox.checked) {
                filterHardcopyCheckbox.checked = false;
            } else if (clickedCheckbox.id === "filterHardcopy" && clickedCheckbox.checked) {
                filterEbookCheckbox.checked = false;
            }

            updateBookVisibility();
        }
        if(searchQuery||typeQuery)
        {
            if(searchQuery){
            console.log(searchQuery,typeQuery)
            searchInput.value=searchQuery;}
            if(typeQuery)
        {
        const selectedCategoryInput = document.querySelector(`input[name="category"][value="${typeQuery}"]`);
        if (selectedCategoryInput) {
          selectedCategoryInput.checked = true;
        }
      console.log(selectedCategoryInput)
        }
            updateBookVisibility()

        }
        // Function to update book visibility based on the search input and filters
        function updateBookVisibility() {
        const query = searchInput.value.toLowerCase();
        const showEbook = filterEbookCheckbox.checked;
        const showHardcopy = filterHardcopyCheckbox.checked;
        const selectedCategory = document.querySelector('#categoriesModal .form-check-input:checked')?.value;

        let visibleCount = 0;

        document.querySelectorAll(".card-body").forEach((card) => {
            const title = card.querySelector(".card-content .card-title").innerText.toLowerCase();
            const description = card.querySelector(".card-content .card-text").innerText.toLowerCase();
            const types = card.dataset.type?.split(',') || []; // Assuming type is stored as a comma-separated string and is now an array
            const categories = card.dataset.categories?.split(',') || []; // Assuming categories are stored as comma-separated string
            const matchesQuery = title.includes(query) || description.includes(query);
            const matchesType = ((showEbook && types.includes('ebook')) )||((showHardcopy && types.includes('hardcopy')) )||(!showEbook&&!showHardcopy);
            const matchesCategory = !selectedCategory || categories.includes(selectedCategory);

            if (matchesQuery && matchesType && matchesCategory) {
                card.style.display = ""; // Show the card
                visibleCount++;
            } else {
                card.style.display = "none"; // Hide the card
            }
        });
        // Show or hide the "No books available" message based on visibility
    const noBooksMessage = document.getElementById("noBooksMessage");
    if (visibleCount === 0) {
      noBooksMessage.style.display = "block";
    } else {
      noBooksMessage.style.display = "none";
    }
    }

        searchInput.addEventListener("input", updateBookVisibility);
        filterEbookCheckbox.addEventListener("change", handleTypeSelection);
        filterHardcopyCheckbox.addEventListener("change", handleTypeSelection);
        applyCategoryFilterButton.addEventListener('click', function () {
            updateBookVisibility(); // Trigger the update based on selected category
            const categoriesModal = new bootstrap.Modal(document.getElementById('categoriesModal'));
            categoriesModal.hide(); // Hide the modal after applying filter
        });
        applyClearCategoryFilterButton.addEventListener('click', function () {
            document.querySelector('input[name="category"]:checked').checked = false;

            updateBookVisibility(); // Trigger the update based on selected category

            const categoriesModal = new bootstrap.Modal(document.getElementById('categoriesModal'));
            categoriesModal.hide(); // Hide the modal after applying filter
        });
        // Initialize the visibility on page load
        updateBookVisibility();
    });

    </script>
    <script>
    document.getElementById('applyCategoryFilter').addEventListener('click', function () {
    const selectedCategory = document.querySelector('#categoriesModal .form-check-input:checked').value;
    
    // Create a hidden input for the selected category
    const form = document.querySelector('form[action="/new"]');
    const input = document.createElement('input');
    input.type = 'hidden';
    input.name = 'category';
    input.value = selectedCategory;
    form.appendChild(input);
    
    // Close the modal
    const categoriesModal = new bootstrap.Modal(document.getElementById('categoriesModal'));
    categoriesModal.hide();
    });


    </script>
    <script>
 document.addEventListener('DOMContentLoaded', function() {
    const ebookCheckbox = document.getElementById('ebookCheckbox');
    const hardcopyCheckbox = document.getElementById('hardcopyCheckbox');
    const ebookLinkContainer = document.getElementById('ebookLinkContainer');
    const quantityContainer = document.getElementById('quantityContainer');
    
    const contributorContainer = document.getElementById('contributorContainer');

    function updateVisibility() {
        if (ebookCheckbox.checked && !hardcopyCheckbox.checked) {
            ebookLinkContainer.style.display = 'block'; // Show the eBook link field
            quantityContainer.style.display = 'none'; // Hide the quantity field
            contributorContainer.style.display='none';

        } else if (ebookCheckbox.checked && hardcopyCheckbox.checked){
            ebookLinkContainer.style.display = 'block'; // Show the eBook link field
            quantityContainer.style.display = 'block'; // Hide the quantity field
contributorContainer.style.display='block';
        }else if(!ebookCheckbox.checked && hardcopyCheckbox.checked){
            ebookLinkContainer.style.display = 'none'; // Hide the eBook link field
            quantityContainer.style.display = 'block'; // Show the quantity field
            contributorContainer.style.display='block';

        }else
        {
            ebookLinkContainer.style.display = 'none'; // Hide the eBook link field
            quantityContainer.style.display = 'none'; // Show the quantity field
            contributorContainer.style.display='none';
        }
    }

    ebookCheckbox.addEventListener('change', updateVisibility);
    hardcopyCheckbox.addEventListener('change', updateVisibility);

    // Call the function initially to set the correct visibility on page load
    updateVisibility();
});


</script>

<style>
  .container-fluid {
    padding: 1rem; /* Optional: Adjust padding as needed */
  }

  .card-body {
    width: 18rem; /* Fixed width for the card */
    height: auto; /* Height will adjust based on content */
    display: flex;
    flex-direction: column;
    justify-content: center; /* Center vertically */
    align-items: center; /* Center horizontally */
    border: 1px solid #ddd;
    border-radius: 0.5rem;
    overflow: hidden;
    margin-bottom: 1rem; /* Spacing between cards */
    background: #8c878723; /* Optional: Background color for better visibility */
  }

  .card-img {
    width: 100%;
    height: 15rem; /* Fixed height for the image */
    object-fit: cover; /* Ensures the image covers the area without distortion */
  }

  .card-title {
    font-size: 1.1rem;
    font-weight: bold;
    margin: 0.5rem 0;
    text-align: center; /* Center text horizontally */
  }

  .card-text {
    font-size: 0.9rem;
    color: #333;
    text-align: center; /* Center text horizontally */
  }
  .card-pages {
   
  }
  .carousel-item img {
  max-height: 500px;
  object-fit: contain; /* Ensures the image scales proportionally */
  width: auto;
  margin: 0 auto; /* Centers the image */
}

  .card-quantity {
    font-size: 0.85rem;
    color: #666;
  }

  .card-desc {
    font-size: 0.85rem;
    color: #444;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2; /* Number of lines to display */
    -webkit-box-orient: vertical;
  }
  .default-image {
  width: 9rem; /* Fixed width to simulate book dimensions */
  height: 15rem; /* Adjust height to maintain proportions */
  background: linear-gradient(to bottom, #51a023, #000000); /* Gradient from green to black */
  display: flex;
  flex-direction: column;
  justify-content: space-between; /* Space out title and author */
  align-items: center;
  text-align: center;
  color: white;
  padding: 1rem; /* Padding for space around text */
  border: 1px solid #ddd; /* Border for card-like appearance */
  border-radius: 0.2rem; /* Rounded corners */
}

.default-image .title {
  margin-bottom: auto; /* Push title to the top */
  padding-bottom: 1rem; /* Padding from the top */
}

.default-image .author {
  margin-top: auto; /* Push author to the bottom */
  padding-top: 1rem; /* Padding from the bottom */
}

  .categories {
  display: flex;
  justify-content: center; /* Center horizontally */
  flex-wrap: wrap; /* Allow wrapping to a new line if needed */
}
  .badge {
  margin: 0 5px 5px 0;
}

/* Ensure the buttons and checkboxes are aligned horizontally */
.container-buttons {
  display: flex;
  align-items: center;
  gap: 1rem; /* Space between buttons */
}

/* Style for checkbox group to stack checkboxes vertically */
.form-check-group {
  display: flex;
  flex-direction: column;
  margin-left: 1rem; /* Space between buttons and checkbox group */
}

/* Optional: Style for form-check elements */
.form-check {
  display: flex;
  align-items: center;
}

</style>


</body>
</html>
